# https://github.com/RG-AutoPilot/Flyway-AutoPilot-FastTrack/blob/release/.github/workflows/GitHub-Flyway-CICD-Pipeline_Linux.yml
name: 'FlywayCLIRunner'
description: 'Run Flyway CLI'
author: 'Sander Stad'
branding:
  icon: 'terminal'
  color: 'blue'

inputs:
  flyway_email:
    description: 'The email address to use for Flyway CLI'
    required: false
    default: ''
  flyway_token:
    description: 'The token to use for Flyway CLI'
    required: false
    default: ''
  target_db_username:
    description: 'The username to use for the target database'
    required: false
    default: ''
  target_db_password:
    description: 'The password to use for the target database'
    required: false
    default: ''
  authenticate_flyway:
    description: 'Disable authentication'
    required: false
    default: 'true'
  agree_to_eula:
    description: 'Agree to the Flyway EULA'
    required: false
    default: 'true'
  environment:
    description: 'The environment to use for the Flyway CLI'
    required: true
    default: ''
  check_drift_on_migration:
    description: 'Check for drift on migration'
    required: false
    default: 'false'
  publish_result:
    description: 'Publish the result of the migration'
    required: false
    default: 'false'
  clean_db_build:
    description: 'Clean the database build before migrating'
    required: false
    default: 'false'
  custom_params:
    description: 'Custom parameters to pass to Flyway CLI'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Check inputs'
      shell: pwsh
      run: |
        if (('${{ inputs.target_db_username }}' -ne '') -and ('${{ inputs.target_db_password }}' -eq '')) {
          Write-Error "Target DB Password is required"
          exit 1
        }
        if (('${{ inputs.flyway_email }}' -ne '') -and ('${{ inputs.flyway_token }}' -eq '')) {
          Write-Error "Flyway Email and Token are required for authentication"
          exit 1
        }
    - name: 'Test if Flyway is already installed (Linux)'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        if command -v flyway &> /dev/null; then
          echo "Flyway is installed. Continuing..."
          echo "flway_installed=true" >> $GITHUB_ENV
          echo "flway_installed_by=ci-pipeline" >> $GITHUB_ENV
        else
          echo "Flyway is not installed!"
          echo "Please install Flyway CLI before running this action, i.e. via the FlywayCLIInstaller action."
          exit 1
        fi

    - name: 'Test if Flyway is already installed (Windows)'
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Get-Command flyway -ErrorAction SilentlyContinue) {
          Write-Host "Flyway is installed. Continuing..."
          "flway_installed=true" >> $env:GITHUB_ENV
          "flway_installed_by=ci-pipeline" >> $env:GITHUB_ENV
        } else {
          Write-Host "Flyway is not installed!"
          Write-Host "Please install Flyway CLI before running this action, i.e. via the FlywayCLIInstaller action."
          exit 1
        }

    - name: 'Authenticate to Flyway'
      if: "${{ inputs.authenticate_flyway }}" == 'true' && success() }}
      shell: pwsh
      run: |
        if ('${{ inputs.authenticate_flyway }}' -eq 'false') {
          $flywayEmail = "${{ inputs.flyway_email }}"
          $flywayToken = "${{ inputs.flyway_token }}"

          if(${{ inputs.agree_to_eula }} == 'true') {
            Write-Host "Agreeing to the Flyway EULA"
            flyway auth -IAgreeToTheEula -email="${{ inputs.flyway_email }}" -token="${{ inputs.flyway_token }}"
          } else {
            flyway auth -email="${{ inputs.flyway_email }}" -token="${{ inputs.flyway_token }}"
          }

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to authenticate to Flyway CLI"
            exit 1
          } else {
            Write-Host "Authenticated to Flyway CLI"
          }
        }

    # - name: Clean DB Build
    #   if: ${{ inputs.clean_db_build }} == 'true' && success() }}
    #   shell: pwsh
    #   run: |
    #     Write-Host "Cleaning database build"

    #     flyway info `
    #       clean info `
    #       -environment="${{ inputs.environment }}" `
    #       -user="${{ inputs.target_db_username }}" `
    #       -password="${{ inputs.target_db_password }}" `
    #       -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
    #       -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
    #       -cleanDisabled='false' `
    #       "-environments.${{ inputs.environment}}.provisioner=clean" `
    #       ${{ inputs.custom_params }}

    #     if ($LASTEXITCODE -ne 0) {
    #       Write-Error "Failed to clean the database"
    #       exit 1
    #     } else {
    #       Write-Host "Cleaned the database"
    #     }

    - name: Migrate DB Build
      shell: pwsh
      run: |
        Write-Host "Migrating database build"

        flyway info `
          migrate info `
          -environment="${{ inputs.environment }}" `
          -user="${{ inputs.target_db_username }}" `
          -password="${{ inputs.target_db_password }}" `
          -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
          -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
          -baselineOnMigrate="true" `
          "-publishResult=${{ inputs.publish_result }}" `
          "-flywayServicePublish.publishReport=${{ inputs.publish_result }}" `
          "-reportEnabled=${{ inputs.publish_result }}" `
          ${{ inputs.custom_params}}

        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to migrate the database"
          exit 1
        } else {
          Write-Host "Migrated the database"
        }







