# https://github.com/RG-AutoPilot/Flyway-AutoPilot-FastTrack/blob/release/.github/workflows/GitHub-Flyway-CICD-Pipeline_Linux.yml
name: 'FlywayCLIRunner'
description: 'Run Flyway CLI'
author: 'Sander Stad'
branding:
  icon: 'terminal'
  color: 'blue'

inputs:
  action_migrate:
    description: 'Enable migration'
    required: false
    default: 'true'
  action_clean_db:
    description: 'Enable cleaning the database build'
    required: false
    default: 'false'
  action_dryrun:
    description: 'Enable dry run'
    required: false
    default: 'false'
  action_check_report:
    description: 'Enable check report generation'
    required: false
    default: 'false'
  flyway_email:
    description: 'The email address to use for Flyway CLI'
    required: false
    default: ''
  flyway_token:
    description: 'The token to use for Flyway CLI'
    required: false
    default: ''
  target_db_username:
    description: 'The username to use for the target database'
    required: false
    default: ''
  target_db_password:
    description: 'The password to use for the target database'
    required: false
    default: ''
  authenticate_flyway:
    description: 'Disable authentication'
    required: false
    default: 'true'
  agree_to_eula:
    description: 'Agree to the Flyway EULA'
    required: false
    default: 'true'
  environment:
    description: 'The environment to use for the Flyway CLI'
    required: true
    default: ''
  publish_result:
    description: 'Publish the result of the migration'
    required: false
    default: 'false'
  generate_check_report:
    description: 'Generate a check report'
    required: false
    default: 'false'
  check_environment:
    description: 'The environment to use for the report'
    required: false
    default: 'default'
  check_database_username:
    description: 'The username to use for the report database'
    required: false
    default: ''
  check_database_password:
    description: 'The password to use for the report database'
    required: false
    default: ''
  check_filter_file:
    description: 'The filter file to use for the check report'
    required: false
    default: '${ GITHUB.WORKSPACE }/Filter.scpf'
  custom_params:
    description: 'Custom parameters to pass to Flyway CLI'
    required: false
    default: ''
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'



runs:
  using: 'composite'
  steps:
    - name: 'Check inputs'
      shell: pwsh
      run: |
        if (('${{ inputs.target_db_username }}' -ne '') -and ('${{ inputs.target_db_password }}' -eq '')) {
          Write-Error "Target DB Password is required"
          exit 1
        }

        if('${{ inputs.authenticate_flyway}}' -eq 'true') {
          if('${{ inputs.flyway_email}}' -eq '') {
            Write-Error "Flyway Email is required for authentication"
            exit 1
          }

          if('${{ inputs.flyway_token}}' -eq '') {
            Write-Error "Flyway Token is required for authentication"
            exit 1
          }
        }

        if('${{ inputs.check_filter_file }}' -eq '') {
          Write-Host "No filter file provided, using default '$($env:GITHUB_WORKSPACE)/Filter.scpf'"
          "check_filter_file=$($env:GITHUB_WORKSPACE)/Filter.scpf" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        } else {
          "check_filter_file=${{ inputs.check_filter_file }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
        }

    - name: 'Test if Flyway is already installed (Linux)'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        if command -v flyway &> /dev/null; then
          echo "Flyway is installed. Continuing..."
          echo "flway_installed=true" >> $GITHUB_ENV
          echo "flway_installed_by=ci-pipeline" >> $GITHUB_ENV
        else
          echo "Flyway is not installed!"
          echo "Please install Flyway CLI before running this action, i.e. via the FlywayCLIInstaller action."
          exit 1
        fi

    - name: 'Test if Flyway is already installed (Windows)'
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Get-Command flyway -ErrorAction SilentlyContinue) {
          Write-Host "Flyway is installed. Continuing..."
          "flway_installed=true" >> $env:GITHUB_ENV
          "flway_installed_by=ci-pipeline" >> $env:GITHUB_ENV
        } else {
          Write-Host "Flyway is not installed!"
          Write-Host "Please install Flyway CLI before running this action, i.e. via the FlywayCLIInstaller action."
          exit 1
        }

    - name: 'Authenticate to Flyway'
      if: ${{ inputs.authenticate_flyway == 'true' && success() }}
      shell: pwsh
      run: |
        try {
          Write-Host "Authenticating to Flyway CLI..."
          $flywayEmail = "${{ inputs.flyway_email }}"
          $flywayToken = "${{ inputs.flyway_token }}"

          if ('${{ inputs.agree_to_eula }}' -eq 'true') {
            Write-Host "Agreeing to the Flyway EULA"
            flyway auth -IAgreeToTheEula -email="${{ inputs.flyway_email }}" -token="${{ inputs.flyway_token }}"
          } else {
            flyway auth -email="${{ inputs.flyway_email }}" -token="${{ inputs.flyway_token }}"
          }

          if ($LASTEXITCODE -ne 0) {
            throw "Failed to authenticate to Flyway CLI"
          }

          Write-Host "Authenticated to Flyway CLI"
        } catch {
          Write-Error $_.Exception.Message
          exit 1
        }

    - name: Clean DB Build
      if: ${{ inputs.action_clean_db == 'true' && success() }}
      shell: pwsh
      run: |
        try {
          Write-Host "Cleaning database build..."

          # If debug is set
          if( '${{ inputs.debug }}' -eq 'true' ) {
            $cmd = @(
              "flyway info",
              "clean info",
              "-environment=`"${{ inputs.environment }}`"",
              "-user=`"${{ inputs.target_db_username }}`"",
              "-password=`"${{ inputs.target_db_password }}`"",
              "-configFiles=`"${{ GITHUB.WORKSPACE }}/flyway.toml`"",
              "-locations=`"filesystem:${{ GITHUB.WORKSPACE }}/migrations`"",
              "-cleanDisabled=`"${{ inputs.clean_disabled }}`"",
              "-environments.${{ inputs.environment }}.provisioner=clean",
              "${{ inputs.custom_params }}"
            ) -join " "

            Write-Host "Command to be executed:"
            Write-Host $cmd
          }

          flyway info `
            clean info `
            -environment="${{ inputs.environment }}" `
            -user="${{ inputs.target_db_username }}" `
            -password="${{ inputs.target_db_password }}" `
            -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
            -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
            -cleanDisabled='false' `
            "-environments.${{ inputs.environment}}.provisioner=clean" `
            ${{ inputs.custom_params }}

          if ($LASTEXITCODE -ne 0) {
            throw "Failed to clean the database"
          }

          Write-Host "Cleaned the database"
        } catch {
          Write-Error $_.Exception.Message
          exit 1
        }
    # - name: Dry Run
    #   if: ${{ inputs.action_dryrun == 'true' && success() }}
    #   shell: pwsh
    #   run: |
    #     try {
    #       Write-Host "Running dry run..."

    #       # If debug is set
    #       if( '${{ inputs.debug }}' -eq 'true' ) {
    #         $cmd = @(
    #           "flyway check",
    #           "-dryrun"
    #         ) -join " "

    #         Write-Host "Command to be executed:"
    #         Write-Host $cmd
    #       }

    #       # flyway check `
    #       #   -dryrun `


    #       if ($LASTEXITCODE -ne 0) {
    #         throw "Failed to generate check report."
    #       }

    #       Write-Host "Generated check report"
    #     } catch {
    #       Write-Error $_.Exception.Message
    #       exit 1
    #     }

    - name: Generate Check Report
      if: ${{ inputs.action_check_report == 'true' && success() }}
      shell: pwsh
      continue-on-error: true
      run: |
        try {
          Write-Host "Generating check report..."

          # If debug is set
          if( '${{ inputs.debug }}' -eq 'true' ) {
            $cmd = @(
              "flyway check",
              "-changes",
              "-drift",
              "-environment=`"${{ inputs.environment }}`"",
              "-user=`"${{ inputs.target_db_username }}`"",
              "-password=`"${{ inputs.target_db_password }}`"",
              "-configFiles=`"${{ GITHUB.WORKSPACE }}/flyway.toml`"",
              "-locations=`"filesystem:${{ GITHUB.WORKSPACE }}/migrations`"",
              "`"-check.buildEnvironment=${{ inputs.check_environment }}`"",
              "`"-check.filterFile=$($env:check_filter_file)`"",
              "`"-environments.${{ inputs.check_environment }}.user=${{ inputs.check_database_username }}`"",
              "`"-environments.${{ inputs.check_environment }}.password=${{ inputs.check_database_password }}`"",
              "`"-reportFilename=${{ GITHUB.WORKSPACE }}/reports/Run-${{ GITHUB.RUN_ID }}-${{ inputs.environment }}-Check-Report.html`"",
              "`"-publishResult=${{ inputs.publish_result }}`"",
              "`"-flywayServicePublish.publishReport=${{ inputs.publish_result }}`"",
              "`"-reportEnabled=${{ inputs.publish_result }}`"",
              "${{ env.CUSTOM_PARAMS }}"
            ) -join " "

            Write-Host "Command to be executed:"
            Write-Host $cmd
          }

          flyway check `
            -changes `
            -drift `
            -environment="${{ inputs.environment }}" `
            -user="${{ inputs.target_db_username }}" `
            -password="${{ inputs.target_db_password }}" `
            -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
            -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
            "-check.buildEnvironment=${{ inputs.check_environment }}" `
            "-check.filterFile=$($env:check_filter_file)" `
            "-environments.${{ inputs.check_environment }}.user=${{ inputs.check_database_username }}" `
            "-environments.${{ inputs.check_environment }}.password=${{ inputs.check_database_password }}" `
            "-reportFilename=${{ GITHUB.WORKSPACE }}/reports/Run-${{ GITHUB.RUN_ID }}-${{ inputs.environment }}-Check-Report.html" `
            "-publishResult=${{ inputs.publish_result }}" `
            "-flywayServicePublish.publishReport=${{ inputs.publish_result }}" `
            "-reportEnabled=${{ inputs.publish_result }}" `
            ${{ env.CUSTOM_PARAMS }}

          if ($LASTEXITCODE -ne 0) {
            throw "Failed to generate check report."
          }

          Write-Host "Generated check report"
        } catch {
          Write-Error $_.Exception.Message
          exit 1
        }

    - name: Migrate DB Build
      if: ${{ inputs.action_migrate == 'true' && success() }}
      shell: pwsh
      run: |
        try {
          Write-Host "Migrating database build..."

          # If debug is set
          if( '${{ inputs.debug }}' -eq 'true' ) {
            $cmd = @(
              "flyway info",
              "migrate info",
              "-environment=`"${{ inputs.environment }}`"",
              "-user=`"${{ inputs.target_db_username }}`"",
              "-password=`"${{ inputs.target_db_password }}`"",
              "-configFiles=`"${{ GITHUB.WORKSPACE }}/flyway.toml`"",
              "-locations=`"filesystem:${{ GITHUB.WORKSPACE }}/migrations`"",
              "-baselineOnMigrate=`"${{ inputs.baseline_on_migrate }}`"",
              "-publishResult=`"${{ inputs.publish_result }}`"",
              "-flywayServicePublish.publishReport=`"${{ inputs.publish_result }}`"",
              "-reportEnabled=`"${{ inputs.publish_result }}`"",
              "${{ inputs.custom_params }}"
            ) -join " "

            Write-Host "Command to be executed:"
            Write-Host $cmd
          }

          flyway info `
            migrate info `
            -environment="${{ inputs.environment }}" `
            -user="${{ inputs.target_db_username }}" `
            -password="${{ inputs.target_db_password }}" `
            -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
            -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
            -baselineOnMigrate="true" `
            "-publishResult=${{ inputs.publish_result }}" `
            "-flywayServicePublish.publishReport=${{ inputs.publish_result }}" `
            "-reportEnabled=${{ inputs.publish_result }}" `
            ${{ inputs.custom_params }}

          if ($LASTEXITCODE -ne 0) {
            throw "Failed to migrate the database"
          }

          Write-Host "Migrated the database"
        } catch {
          Write-Error $_.Exception.Message
          exit 1
        }







