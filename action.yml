# https://github.com/RG-AutoPilot/Flyway-AutoPilot-FastTrack/blob/release/.github/workflows/GitHub-Flyway-CICD-Pipeline_Linux.yml
name: 'FlywayCLRunner'
description: 'Run Flyway CLI'
author: 'Sander Stad'
branding:
  icon: 'terminal'
  color: 'blue'

inputs:
  flyway_email:
    description: 'The email address to use for Flyway CLI'
    required: false
    default: ''
  flyway_token:
    description: 'The token to use for Flyway CLI'
    required: false
    default: ''
  target_db_username:
    description: 'The username to use for the target database'
    required: false
    default: ''
  target_db_password:
    description: 'The password to use for the target database'
    required: false
    default: ''
  target_db_url:
    description: 'The URL to use for the target database'
    required: true
    default: ''
  custom_params:
    description: 'Custom parameters to pass to Flyway CLI'
    required: false
    default: ''
  check_drift_on_migration:
    description: 'Check for drift on migration'
    required: false
    default: 'false'
  auth_disabled:
    description: 'Disable authentication'
    required: false
    default: 'false'
  environment:
    description: 'The environment to use for the Flyway CLI'
    required: false
    default: ''
  publish_result:
    description: 'Publish the result of the migration'
    required: false
    default: 'false'
  generate_report:
    description: 'Generate a report'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: 'Test if Flyway is already installed (Linux)'
      if: runner.os == 'Linux'
      shell: bash
      run: |
        if command -v flyway &> /dev/null; then
          echo "Flyway is installed. Continuing..."
          echo "flway_installed=true" >> $GITHUB_ENV
          echo "flway_installed_by=ci-pipeline" >> $GITHUB_ENV
        else
          echo "Flyway is not installed!"
          echo "Please install Flyway CLI before running this action, i.e. via the FlywayCLIInstaller action."
          exit 1
        fi

    - name: 'Test if Flyway is already installed (Windows)'
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        if (Get-Command flyway -ErrorAction SilentlyContinue) {
          Write-Host "Flyway is installed. Continuing..."
          "flway_installed=true" >> $env:GITHUB_ENV
          "flway_installed_by=ci-pipeline" >> $env:GITHUB_ENV
        } else {
          Write-Host "Flyway is not installed!"
          Write-Host "Please install Flyway CLI before running this action, i.e. via the FlywayCLIInstaller action."
          exit 1
        }

    - name: 'Authenticate to Flyway'
      if: ${{ inputs.auth_disabled }} == 'false' && success() }}
      shell: pwsh
      run: |
        if ('${{ inputs.auth_disabled }}' -eq 'false') {
          $flywayEmail = "${{ inputs.flyway_email }}"
          $flywayToken = "${{ inputs.flyway_token }}"

          flyway auth -IAgreeToTheEula -email="${{ env.FLYWAY_EMAIL }}" -token="${{ env.FLYWAY_TOKEN }}"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to authenticate to Flyway CLI"
            exit 1
          } else {
            Write-Host "Authenticated to Flyway CLI"
          }
        }

    - name: Create Check Report
      if: ${{ inputs.generate_report }} == 'true' && success() }}
      shell: pwsh
      run: |
        Write-Host "Creating check report"
        $targetDbUsername = "${{ inputs.target_db_username }}"
        $targetDbPassword = "${{ inputs.target_db_password }}"
        $targetDbUrl = "${{ inputs.target_db_url }}"
        $customParams = "${{ inputs.custom_params }}"
        $environment = "${{ inputs.environment }}"

        flyway check `
          -dryrun `
          -changes `
          -drift `
          -installedBy="ci-pipeline" `
          -environment="$environment" `
          -user="$targetDbUsername" `
          -password="$targetDbPassword" `
          -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
          -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
          "-check.buildEnvironment=$environment" `
          "-environments.$($environment).user=$($targetDbUsername)" `
          "-environments.$($environment).password=$($targetDbPassword)" `
          "-reportFilename=${{ GITHUB.WORKSPACE }}/reports/Report-Run-${{ GITHUB.RUN_ID }}-$($environment)-Check-Report.html" `
          "-publishResult=$($inputs.publish_result)" `
          "-flywayServicePublish.publishReport=$($inputs.publish_result)" `
          "-reportEnabled=$($inputs.publish_result)" `
          ${{ inputs.custom_params }}

        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to create the check report"
          exit 1
        } else {
          Write-Host "Created the check report"
        }
      continue-on-error: true

    - name: Clean DB Build
      shell: pwsh
      run: |
        Write-Host "Cleaning database build"
        $targetDbUsername = "${{ inputs.target_db_username }}"
        $targetDbPassword = "${{ inputs.target_db_password }}"
        $targetDbUrl = "${{ inputs.target_db_url }}"
        $customParams = "${{ inputs.custom_params }}"
        $environment = "${{ inputs.environment }}"

        flyway info `
          clean info `
          -environment="$environment" `
          -user="$targetDbUsername" `
          -password="$targetDbPassword" `
          -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" `
          -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" `
          -cleanDisabled='false' `
          "-environments.$($environment).provisioner=clean" `
          $customParams

        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to clean the database"
          exit 1
        } else {
          Write-Host "Cleaned the database"
        }

    - name: Migrate DB Build
      shell: pwsh
      run: |
        Write-Host "Migrating database build"
        $targetDbUsername = "${{ inputs.target_db_username }}"
        $targetDbPassword = "${{ inputs.target_db_password }}"
        $targetDbUrl = "${{ inputs.target_db_url }}"
        $customParams = "${{ inputs.custom_params }}"
        $environment = "${{ inputs.environment }}"

        flyway info migrate info -environment="$environment" -user="$targetDbUsername" -password="$targetDbPassword" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" -cleanDisabled='false' -baselineOnMigrate="true" "-publishResult=${{ inputs.publish_result }}" "-flywayServicePublish.publishReport=${{ inputs.publish_result }}" "-reportEnabled=${{ inputs.publish_result }}" $customParams
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to migrate the database"
          exit 1
        } else {
          Write-Host "Migrated the database"
        }







